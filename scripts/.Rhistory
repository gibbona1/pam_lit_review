return(0)
}
}
# Get the path to the Downloads folder
# This assumes you're on a Unix-like system. For Windows, you might need to adjust this.
downloads_folder <- "C:\\Users\\Anthony\\Downloads/"
# List all .rda files
rda_files <- list.files(path = downloads_folder, pattern = "*.rda", full.names = TRUE)
# Function to get audio length in seconds
get_audio_length <- function(file_path) {
# Load the data
load(file_path)
# Check if there's an object that might be audio
audio_objects <- ls()[sapply(mget(ls()), function(x) "Wave" %in% class(x))]
if (length(audio_objects) > 0) {
# Get the first audio object - assuming there's only one per file or you want the first
audio_data <- get(audio_objects[1])
return(length(audio_data) / audio_data@samp.rate)
} else {
warning(paste("No audio object found in", file_path))
return(0)
}
}
get_size <- function(file_path) {
# Load the data
load(file_path)
# Check if there's an object that might be audio
audio_objects <- ls()[sapply(mget(ls()), function(x) "Wave" %in% class(x))]
if (length(audio_objects) > 0) {
# Get the first audio object - assuming there's only one per file or you want the first
audio_data <- get(audio_objects[1])
size_bytes <- object.size(audio_data)
# Convert bytes to MB
size_mb <- size_bytes / (1024^2) # 1 MB = 1024^2 bytes
return(size_mb)
} else {
warning(paste("No audio object found in", file_path))
return(0)
}
}
# Calculate duration for each file
durations <- sapply(rda_files, get_audio_length)
rda_files
# List all .rda files
rda_files <- list.files(path = downloads_folder, pattern = "*.rda$", full.names = TRUE)
# Function to get audio length in seconds
get_audio_length <- function(file_path) {
# Load the data
load(file_path)
# Check if there's an object that might be audio
audio_objects <- ls()[sapply(mget(ls()), function(x) "Wave" %in% class(x))]
if (length(audio_objects) > 0) {
# Get the first audio object - assuming there's only one per file or you want the first
audio_data <- get(audio_objects[1])
return(length(audio_data) / audio_data@samp.rate)
} else {
warning(paste("No audio object found in", file_path))
return(0)
}
}
# Get the path to the Downloads folder
# This assumes you're on a Unix-like system. For Windows, you might need to adjust this.
downloads_folder <- "C:\\Users\\Anthony\\Downloads/"
# List all .rda files
rda_files <- list.files(path = downloads_folder, pattern = "*.rda$", full.names = TRUE)
rda_files
# Function to get audio length in seconds
get_audio_length <- function(file_path) {
# Load the data
load(file_path)
# Check if there's an object that might be audio
audio_objects <- ls()[sapply(mget(ls()), function(x) "Wave" %in% class(x))]
if (length(audio_objects) > 0) {
# Get the first audio object - assuming there's only one per file or you want the first
audio_data <- get(audio_objects[1])
return(length(audio_data) / audio_data@samp.rate)
} else {
warning(paste("No audio object found in", file_path))
return(0)
}
}
get_size <- function(file_path) {
# Load the data
load(file_path)
# Check if there's an object that might be audio
audio_objects <- ls()[sapply(mget(ls()), function(x) "Wave" %in% class(x))]
if (length(audio_objects) > 0) {
# Get the first audio object - assuming there's only one per file or you want the first
audio_data <- get(audio_objects[1])
size_bytes <- object.size(audio_data)
# Convert bytes to MB
size_mb <- size_bytes / (1024^2) # 1 MB = 1024^2 bytes
return(size_mb)
} else {
warning(paste("No audio object found in", file_path))
return(0)
}
}
# Calculate duration for each file
durations <- sapply(rda_files, get_audio_length)
sizes <- sapply(rda_files, get_size)
# Convert total duration to hours
total_hours <- sum(durations) / 3600
total_size  <- sum(sizes) / 1024
# Output
cat("Total audio length in hours:", total_hours, "\n")
cat("Total size in GB: ", total_size, "\n")
setwd()
setwd("C:/Users/Anthony/Documents/GitHub/wf_lit_review")
df <- read.csv("tagged_literature.csv")
geom_boxplot
library(ggplot2)
?geom_boxplot
ggplot(df, aes(x=Year, y=Dataset_GB)) + geom_boxplot()
df <- read.csv("tagged_literature.csv")
df <- read.csv("tagged_literature.csv")
View(df)
ggplot(df, aes(x=Year, y=Dataset_GB)) + geom_boxplot()
ggplot(df, aes(x=Year, y=Dataset_GB)) + geom_boxplot() + scale_y_log10()
ggplot(df, aes(Year, Dataset_GB)) + geom_boxplot() + scale_y_log10()
ggplot(df, aes(Year, Dataset_GB)) + geom_boxplot() + scale_y_log10()
df <- read.csv("tagged_literature.csv")
df$Year <- as.factor(df$Year)
ggplot(df, aes(Year, Dataset_GB)) + geom_boxplot() + scale_y_log10()
ggplot(df, aes(Year, Dataset_hours)) + geom_boxplot() + scale_y_log10()
# Sample data
coords <- c("-0.356251N,12.940863E;-0.078775N,15.127076E", "-0.078775N,15.1270777E")
# Function to convert coordinates to numeric values
convert_to_numeric <- function(coord_string) {
# Split the string by comma
parts <- strsplit(coord_string, ",")[[1]]
# Extract latitude and longitude, handle direction
lat <- as.numeric(gsub("[A-Z]", "", parts[1]))
lon <- as.numeric(gsub("[A-Z]", "", parts[2]))
# Check direction for latitude
if (grepl("S", parts[1])) {
lat <- -lat
}
# Check direction for longitude
if (grepl("W", parts[2])) {
lon <- -lon
}
return(c(lat, lon))
}
process_all_coords <- function(coords_string) {
# Split by semicolon if present
coord_list <- strsplit(coords_string, ";")[[1]]
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}
# Convert all coordinates
result <- process_all_coords(coords)
# Separate into latitude and longitude vectors
latitude <- result[, 1]
longitude <- result[, 2]
# Print results
print(latitude)
print(longitude)
result
coords[1]
strsplit(coords[1], ";")
strsplit(coords[1], ";")[[1]]
t(sapply(strsplit(coords[1], ";")[[1]], convert_to_numeric))
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_vector, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
result <- process_all_coords(coords)
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
result <- process_all_coords(coords)
# Separate into latitude and longitude vectors
latitude <- result[, 1]
longitude <- result[, 2]
# Print results
print(latitude)
print(longitude)
result
# Convert all coordinates
latlong_df <- process_all_coords(coords)
colnames(latlong_df) <- c("lat", "long")
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
print(x)
coord_list <- strsplit(x, ";")[[1]]
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
strsplit(" -1.1288549N,113.4899024E", ";")[[1]]
t(sapply(" -1.1288549N,113.4899024E", convert_to_numeric))
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
print(coord_list)
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
print(coord_list)
if(is.null(coord_list))
return("")
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
if(is.null(coord_list))
return("")
print(coord_list)
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
if(is.null(coord_list) || length(coord_list) == 0)
return("")
print(coord_list)
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
latlong_df
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
if(is.null(coord_list) || length(coord_list) == 0)
return(NA)
print(coord_list)
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
colnames(latlong_df) <- c("lat", "long")
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
if(is.null(coord_list) || length(coord_list) == 0)
return(NA)
#print(coord_list)
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
latlong_df
colnames(latlong_df) <- c("lat", "long")
latlong_df <- na.omit(latlong_df)
latlong_df
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
colnames(latlong_df) <- c("lat", "long")
latlong_df <- latlong_df[!is.na(latlong_df),]
# Convert all coordinates
latlong_df <- process_all_coords(df$latlong)
class(latlong_df)
# Convert all coordinates
latlong_df <- as.data.frame(process_all_coords(df$latlong))
colnames(latlong_df) <- c("lat", "long")
latlong_df <- latlong_df[!is.na(latlong_df),]
library(maps)
install.packages("maps")
library(maps)
# Create the world map
world <- map_data("world")
# Plotting
ggplot() +
# Add world map
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# Add points for different tags
geom_point(data = latlong_df, aes(x = long, y = lat, shape = 1), size = 3) +
# Set coordinate system to map projection
coord_fixed(ratio = 1) +
# Add labels and title
labs(title = "Global Distribution of Species",
x = "Longitude",
y = "Latitude") +
# Adjust legend
scale_shape_manual(values = c(1, 2, 3, 4, 5),
name = "Species",
breaks = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates"),
labels = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates")) +
# Theme settings
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "right")
# Plotting
ggplot() +
# Add world map
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# Add points for different tags
geom_point(data = latlong_df, aes(x = long, y = lat, shape = 1), size = 3) +
# Set coordinate system to map projection
coord_fixed(ratio = 1) +
# Add labels and title
labs(title = "Global Distribution of Species",
x = "Longitude",
y = "Latitude") +
# Adjust legend
scale_shape_manual(values = c(1, 2, 3, 4, 5),
name = "Species",
breaks = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates"),
labels = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates")) +
# Theme settings
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "right")
# Plotting
ggplot() +
# Add world map
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# Add points for different tags
geom_point(data = latlong_df, aes(x = long, y = lat, shape = 1), size = 3) +
# Set coordinate system to map projection
coord_fixed(ratio = 1) +
# Add labels and title
labs(title = "Global Distribution of Species",
x = "Longitude",
y = "Latitude") +
# Adjust legend
#scale_shape_manual(values = c(1, 2, 3, 4, 5),
#                   name = "Species",
#                   breaks = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates"),
#                   labels = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates")) +
# Theme settings
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "right")
View(latlong_df)
df <- read.csv("tagged_literature.csv")
df$Year <- as.factor(df$Year)
ggplot(df, aes(Year, Dataset_hours)) + geom_boxplot() + scale_y_log10()
# Function to convert coordinates to numeric values
convert_to_numeric <- function(coord_string) {
# Split the string by comma
parts <- strsplit(coord_string, ",")[[1]]
#remove leading or trailing space
# Extract latitude and longitude, handle direction
lat <- as.numeric(gsub("[A-Z]", "", parts[1]))
lon <- as.numeric(gsub("[A-Z]", "", parts[2]))
# Check direction for latitude
if (grepl("S", parts[1])) {
lat <- -lat
}
# Check direction for longitude
if (grepl("W", parts[2])) {
lon <- -lon
}
return(c(lat, lon))
}
process_all_coords <- function(coords_string) {
all_coords <- do.call(rbind, lapply(coords_string, function(x) {
# Split by semicolon if present
coord_list <- strsplit(x, ";")[[1]]
if(is.null(coord_list) || length(coord_list) == 0)
return(NA)
#print(coord_list)
# Convert each coordinate pair to numeric
numeric_coords <- t(sapply(coord_list, convert_to_numeric))
return(numeric_coords)
}))
return(all_coords)
}
# Convert all coordinates
latlong_df <- as.data.frame(process_all_coords(df$latlong))
colnames(latlong_df) <- c("lat", "long")
latlong_df <- latlong_df[!is.na(latlong_df),]
# Create the world map
world <- map_data("world")
# Plotting
ggplot() +
# Add world map
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# Add points for different tags
geom_point(data = latlong_df, aes(x = long, y = lat, shape = 1), size = 3) +
# Set coordinate system to map projection
coord_fixed(ratio = 1) +
# Add labels and title
labs(title = "Global Distribution of Species",
x = "Longitude",
y = "Latitude") +
# Adjust legend
#scale_shape_manual(values = c(1, 2, 3, 4, 5),
#                   name = "Species",
#                   breaks = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates"),
#                   labels = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates")) +
# Theme settings
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "right")
# Convert all coordinates
latlong_df <- as.data.frame(process_all_coords(df$latlong))
colnames(latlong_df) <- c("lat", "long")
latlong_df <- latlong_df[!is.na(latlong_df),]
# Convert all coordinates
latlong_df <- as.data.frame(process_all_coords(df$latlong))
colnames(latlong_df) <- c("lat", "long")
latlong_df <- na.omit(latlong_df)
# Plotting
ggplot() +
# Add world map
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# Add points for different tags
geom_point(data = latlong_df, aes(x = long, y = lat, shape = 1), size = 3) +
# Set coordinate system to map projection
coord_fixed(ratio = 1) +
# Add labels and title
labs(title = "Global Distribution of Species",
x = "Longitude",
y = "Latitude") +
# Adjust legend
#scale_shape_manual(values = c(1, 2, 3, 4, 5),
#                   name = "Species",
#                   breaks = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates"),
#                   labels = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates")) +
# Theme settings
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "right")
# Plotting
ggplot() +
# Add world map
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# Add points for different tags
geom_point(data = latlong_df, aes(x = long, y = lat, shape = "1"), size = 3) +
# Set coordinate system to map projection
coord_fixed(ratio = 1) +
# Add labels and title
labs(title = "Global Distribution of Species",
x = "Longitude",
y = "Latitude") +
# Adjust legend
#scale_shape_manual(values = c(1, 2, 3, 4, 5),
#                   name = "Species",
#                   breaks = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates"),
#                   labels = c("Bats", "Non-flying mammals", "Birds", "Anurans", "Invertebrates")) +
# Theme settings
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "right")
